# perfume-bot/search.py
# –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ñ—é–º–æ–≤: –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è

from rapidfuzz import fuzz                 # –¥–ª—è fuzzy-–ø–æ–∏—Å–∫–∞
from utils import normalize_for_match      # —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
from database import fetch_all_originals   # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –∏–∑ –ë–î

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞
CATALOG = None
BRAND_MAP = None
NAME_MAP = None

def load_catalog(conn):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –≤ –ø–∞–º—è—Ç—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    rows = fetch_all_originals(conn)
    catalog, brand_map, name_map = [], {}, {}
    for r in rows:
        item = {
            "id": r["id"],
            "brand": r["brand"] or "",
            "name": r["name"] or "",
            "brand_norm": normalize_for_match(r["brand"]),
            "name_norm": normalize_for_match(r["name"]),
            "display_norm": normalize_for_match(f"{r['brand']} {r['name']}"),
        }
        catalog.append(item)
        brand_map.setdefault(item["brand_norm"], []).append(item)
        name_map.setdefault(item["name_norm"], []).append(item)
    return catalog, brand_map, name_map

def init_catalog(conn):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞"""
    global CATALOG, BRAND_MAP, NAME_MAP
    CATALOG, BRAND_MAP, NAME_MAP = load_catalog(conn)
def find_original(conn, user_text):
    global CATALOG, BRAND_MAP, NAME_MAP

    if not user_text or not user_text.strip():
        return {"ok": False, "message": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –û—Ç–ø—Ä–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ë—Ä–µ–Ω–¥ –ù–∞–∑–≤–∞–Ω–∏–µ'."}

    if not CATALOG:
        init_catalog(conn)

    user_norm = normalize_for_match(user_text)

    # 1. –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ brand + name (display_norm)
    for c in CATALOG:
        if c["display_norm"] == user_norm:
            return {"ok": True, "original": c}

    # 2. Fuzzy-–ø–æ–∏—Å–∫ –ø–æ display_norm
    best, score = None, 0
    for c in CATALOG:
        s = fuzz.ratio(user_norm, c["display_norm"])
        if s > score:
            best, score = c, s
    if best and score >= 90:  # –ø–æ—Ä–æ–≥ –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å
        return {"ok": True, "original": best}

    # 3. Fuzzy-–ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    best, score = None, 0
    for c in CATALOG:
        s = fuzz.ratio(user_norm, c["name_norm"])
        if s > score:
            best, score = c, s
    if best and score >= 90:
        return {"ok": True, "original": best}

    return {"ok": False, "message": "–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –≤—ã –∏—Å–∫–∞–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üòÖ"}
